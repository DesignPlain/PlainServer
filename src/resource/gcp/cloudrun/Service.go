package cloudrun

import types "DesignSphere_Server/src/resource/gcp/types"

type Service struct {
	/*
	   If set to `true`, the revision name (template.metadata.name) will be omitted and
	   autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
	   is also set.
	   (For legacy support, if `template.metadata.name` is unset in state while
	   this field is set to false, the revision name will still autogenerate.)
	*/
	AutogenerateRevisionName bool `json:"autogenerateRevisionName,omitempty" yaml:"autogenerateRevisionName,omitempty"`

	// The location of the cloud run instance. eg us-central1
	Location string `json:"location,omitempty" yaml:"location,omitempty"`

	/*
	   Metadata associated with this Service, including name, namespace, labels,
	   and annotations.
	   Structure is documented below.
	*/
	Metadata types.Cloudrun_ServiceMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	/*
	   Name must be unique within a Google Cloud project and region.
	   Is required when creating resources. Name is primarily intended
	   for creation idempotence and configuration definition. Cannot be updated.
	   More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	*/
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	/*
	   The ID of the project in which the resource belongs.
	   If it is not provided, the provider project is used.
	*/
	Project string `json:"project,omitempty" yaml:"project,omitempty"`

	/*
	   template holds the latest specification for the Revision to
	   be stamped out. The template references the container image, and may also
	   include labels and annotations that should be attached to the Revision.
	   To correlate a Revision, and/or to force a Revision to be created when the
	   spec doesn't otherwise change, a nonce label may be provided in the
	   template metadata. For more details, see:
	   https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
	   Cloud Run does not currently support referencing a build that is
	   responsible for materializing the container image from source.
	   Structure is documented below.
	*/
	Template types.Cloudrun_ServiceTemplate `json:"template,omitempty" yaml:"template,omitempty"`

	/*
	   Traffic specifies how to distribute traffic over a collection of Knative Revisions
	   and Configurations
	   Structure is documented below.
	*/
	Traffics []types.Cloudrun_ServiceTraffic `json:"traffics,omitempty" yaml:"traffics,omitempty"`
}
