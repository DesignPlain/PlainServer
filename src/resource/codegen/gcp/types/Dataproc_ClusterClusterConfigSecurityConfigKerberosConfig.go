package types

type Dataproc_ClusterClusterConfigSecurityConfigKerberosConfig struct {
	/*
	   The Cloud Storage URI of a KMS encrypted file containing
	   the master key of the KDC database.
	*/
	KdcDbKeyUri string `json:"kdcDbKeyUri,omitempty" yaml:"kdcDbKeyUri,omitempty"`

	/*
	   The admin server (IP or hostname) for the
	   remote trusted realm in a cross realm trust relationship.
	*/
	CrossRealmTrustAdminServer string `json:"crossRealmTrustAdminServer,omitempty" yaml:"crossRealmTrustAdminServer,omitempty"`

	/*
	   The KDC (IP or hostname) for the
	   remote trusted realm in a cross realm trust relationship.
	*/
	CrossRealmTrustKdc string `json:"crossRealmTrustKdc,omitempty" yaml:"crossRealmTrustKdc,omitempty"`

	/*
	   The Cloud Storage URI of a KMS encrypted file containing
	   the password to the user provided key. For the self-signed certificate, this password
	   is generated by Dataproc.
	*/
	KeyPasswordUri string `json:"keyPasswordUri,omitempty" yaml:"keyPasswordUri,omitempty"`

	/*
	   The Cloud Storage URI of a KMS encrypted file containing
	   the password to the user provided keystore. For the self-signed certificated, the password
	   is generated by Dataproc.
	*/
	KeystorePasswordUri string `json:"keystorePasswordUri,omitempty" yaml:"keystorePasswordUri,omitempty"`

	/*
	   The Cloud Storage URI of a KMS encrypted file
	   containing the root principal password.
	*/
	RootPrincipalPasswordUri string `json:"rootPrincipalPasswordUri,omitempty" yaml:"rootPrincipalPasswordUri,omitempty"`

	/*
	   The Cloud Storage URI of a KMS encrypted file
	   containing the password to the user provided truststore. For the self-signed
	   certificate, this password is generated by Dataproc.
	*/
	TruststorePasswordUri string `json:"truststorePasswordUri,omitempty" yaml:"truststorePasswordUri,omitempty"`

	/*
	   The Cloud Storage URI of the truststore file used for
	   SSL encryption. If not provided, Dataproc will provide a self-signed certificate.

	   - - -
	*/
	TruststoreUri string `json:"truststoreUri,omitempty" yaml:"truststoreUri,omitempty"`

	/*
	   The remote realm the Dataproc on-cluster KDC will
	   trust, should the user enable cross realm trust.
	*/
	CrossRealmTrustRealm string `json:"crossRealmTrustRealm,omitempty" yaml:"crossRealmTrustRealm,omitempty"`

	/*
	   The Cloud Storage URI of the keystore file used for SSL encryption.
	   If not provided, Dataproc will provide a self-signed certificate.
	*/
	KeystoreUri string `json:"keystoreUri,omitempty" yaml:"keystoreUri,omitempty"`

	/*
	   The name of the on-cluster Kerberos realm. If not specified, the
	   uppercased domain of hostnames will be the realm.
	*/
	Realm string `json:"realm,omitempty" yaml:"realm,omitempty"`

	/*
	   The Cloud Storage URI of a KMS
	   encrypted file containing the shared password between the on-cluster Kerberos realm
	   and the remote trusted realm, in a cross realm trust relationship.
	*/
	CrossRealmTrustSharedPasswordUri string `json:"crossRealmTrustSharedPasswordUri,omitempty" yaml:"crossRealmTrustSharedPasswordUri,omitempty"`

	// Flag to indicate whether to Kerberize the cluster.
	EnableKerberos bool `json:"enableKerberos,omitempty" yaml:"enableKerberos,omitempty"`

	// The URI of the KMS key used to encrypt various sensitive files.
	KmsKeyUri string `json:"kmsKeyUri,omitempty" yaml:"kmsKeyUri,omitempty"`

	// The lifetime of the ticket granting ticket, in hours.
	TgtLifetimeHours int `json:"tgtLifetimeHours,omitempty" yaml:"tgtLifetimeHours,omitempty"`
}
