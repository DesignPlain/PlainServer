package elb

import types "libds/aws/types"

type LoadBalancer struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs types.Elb_LoadBalancerAccessLogs `json:"accessLogs,omitempty" yaml:"accessLogs,omitempty"`

	// The AZ's to serve traffic in.
	AvailabilityZones []string `json:"availabilityZones,omitempty" yaml:"availabilityZones,omitempty"`

	// A health_check block. Health Check documented below.
	HealthCheck types.Elb_LoadBalancerHealthCheck `json:"healthCheck,omitempty" yaml:"healthCheck,omitempty"`

	/*
	   Creates a unique name beginning with the specified
	   prefix. Conflicts with `name`.
	*/
	NamePrefix string `json:"namePrefix,omitempty" yaml:"namePrefix,omitempty"`

	/*
	   A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.

	   Exactly one of `availability_zones` or `subnets` must be specified: this
	   determines if the ELB exists in a VPC or in EC2-classic.
	*/
	Tags map[string]string `json:"tags,omitempty" yaml:"tags,omitempty"`

	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining bool `json:"connectionDraining,omitempty" yaml:"connectionDraining,omitempty"`

	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout int `json:"connectionDrainingTimeout,omitempty" yaml:"connectionDrainingTimeout,omitempty"`

	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode string `json:"desyncMitigationMode,omitempty" yaml:"desyncMitigationMode,omitempty"`

	/*
	   A list of security group IDs to assign to the ELB.
	   Only valid if creating an ELB within a VPC
	*/
	SecurityGroups []string `json:"securityGroups,omitempty" yaml:"securityGroups,omitempty"`

	/*
	   The name of the security group that you can use as
	   part of your inbound rules for your load balancer's back-end application
	   instances. Use this for Classic or Default VPC only.
	*/
	SourceSecurityGroup string `json:"sourceSecurityGroup,omitempty" yaml:"sourceSecurityGroup,omitempty"`

	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout int `json:"idleTimeout,omitempty" yaml:"idleTimeout,omitempty"`

	// A list of instance ids to place in the ELB pool.
	Instances []string `json:"instances,omitempty" yaml:"instances,omitempty"`

	// If true, ELB will be an internal ELB.
	Internal bool `json:"internal,omitempty" yaml:"internal,omitempty"`

	// A list of listener blocks. Listeners documented below.
	Listeners []types.Elb_LoadBalancerListener `json:"listeners,omitempty" yaml:"listeners,omitempty"`

	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing bool `json:"crossZoneLoadBalancing,omitempty" yaml:"crossZoneLoadBalancing,omitempty"`

	// The name of the ELB. By default generated by this provider.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets []string `json:"subnets,omitempty" yaml:"subnets,omitempty"`
}
